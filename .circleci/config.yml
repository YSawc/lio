version: 2.1

executors:
  default:
    docker:
      - image: circleci/rust:latest
    working_directory: ~/app

commands:
  record_build_env:
    steps:
      - run:
          name: Record build environment to use as cache key
          command: |
            echo $OS_VERSION | tee /tmp/build-env
            rustc --version | tee /tmp/build-env
  save_cache_:
    steps:
      - save_cache:
          key: cache-cargo-target-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/build-env" }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
            - target
  restore_cache_:
    steps:
      - restore_cache:
          keys:
            - cache-cargo-target-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/build-env" }}-{{ checksum "Cargo.lock" }}
            - cache-cargo-target-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/build-env" }}

jobs:
  lint:
    executor:
      name: default
    steps:
      - checkout
      - record_build_env
      - restore_cache_
      - run:
          name: rustup component add
          command: rustup component add clippy rustfmt
      - run:
          name: fmt
          command: cargo fmt --all -- --check
      - run:
          name: clippy
          command: cargo clippy --all-targets --all-features -- -D warnings
      - save_cache_

  readme:
    executor:
      name: default
    steps:
      - checkout
      - record_build_env
      - restore_cache_
      - run:
          name: Install cargo-readme
          command: cargo install cargo-readme
      - run:
          name: Check diff between rustdoc & README
          command: |
            cargo readme | tee /tmp/README.md
            diff /tmp/README.md README.md
      - save_cache_

  test:
    parameters:
      rust_version:
        type: string
        default: ""
    executor:
      name: default
    steps:
      - checkout
      - run:
          name: rustup version
          command: rustup --version
      - when:
          condition: << parameters.rust_version >>
          steps:
            - run:
                name: Install & select $rust_version if specified
                command: |
                  rustup install << parameters.rust_version >>
                  rustup override set << parameters.rust_version >>
      - record_build_env
      - restore_cache_
      - run:
          name: build & test
          command: |
            sudo apt install lsb-release wget software-properties-common
            sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
            cargo test
            sh test.sh
      - save_cache_

workflows:
  version: 2
  test:
    jobs:
      # - readme
      # - lint
      - test:
          name: run all test
